<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2022.2.4">
  <Settings>
    <Param val="use prefs" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="use prefs" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="{'participant': 'f&quot;{randint(0, 999999):06.0f}&quot;', 'session': '001', 'dev_mode': '1'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1920, 1080]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="image_gen_self_report" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="exp" valType="code" updates="None" name="logging level"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
  </Settings>
  <Routines>
    <Routine name="trial">
      <CodeComponent name="code">
        <Param val="#### Start of experiment&amp;#10;&amp;#10;## Import packages&amp;#10;import torch&amp;#10;import numpy as np&amp;#10;from diffusers import StableUnCLIPImg2ImgPipeline&amp;#10;&amp;#10;## Set variables&amp;#10;global model_path&amp;#10;model_path = &quot;path_to_model&quot;&amp;#10;global diffusion_steps&amp;#10;diffusion_steps = 21&amp;#10;&amp;#10;embeddings = np.zeros((8, 1024))&amp;#10;parent_1 = np.zeros((1, 1024))&amp;#10;parent_2 = np.zeros((1, 1024))&amp;#10;&amp;#10;global max_iters&amp;#10;max_iters = 3&amp;#10;global mutation_rate&amp;#10;mutation_rate = 0.05&amp;#10;global mutation_size&amp;#10;mutation_size = 1&amp;#10;&amp;#10;top_embeddings = np.zeros((max_iters, 1024))&amp;#10;all_ratings = np.zeros((1, max_iters))&amp;#10;&amp;#10;## Classes&amp;#10;class Image(visual.ImageStim):&amp;#10;    # Embedding property&amp;#10;    embedding = None&amp;#10;&amp;#10;## Functions&amp;#10;def generate_image(embedding, image_name):&amp;#10;    # Ensure correct size and datatype&amp;#10;    embedding = torch.tensor(np.reshape(embedding, (1,np.size(embedding))), dtype=torch.float16)&amp;#10;    embedding = embedding.to(device)&amp;#10;    # Generate and save image&amp;#10;    images = pipe(image_embeds=embedding, num_inference_steps=diffusion_steps).images&amp;#10;    images[0].save(image_name)&amp;#10;    &amp;#10;def generate_children(parent_1, parent_2):&amp;#10;    embeddings = np.zeros((8, 1024))&amp;#10;    parent_1 = parent_1.reshape((1,1024))&amp;#10;    parent_2 = parent_2.reshape((1,1024))&amp;#10;    &amp;#10;    # Generate recombinations&amp;#10;    for i in range(8):&amp;#10;        child = np.zeros((1, 1024))&amp;#10;        for j in range(1024):&amp;#10;            choice = np.random.random()&amp;#10;            if choice &lt;= 0.5:&amp;#10;                child[0,j] = parent_1[0,j]&amp;#10;            else:&amp;#10;                child[0,j] = parent_2[0,j]&amp;#10;        embeddings[i,:] = child    &amp;#10;        &amp;#10;    # Add mutations&amp;#10;    y = np.random.uniform(-mutation_size, mutation_size, size=(8, 1024))&amp;#10;    z = np.random.binomial(1, mutation_rate, size=(8, 1024))&amp;#10;    # Create mutation vec&amp;#10;    mutation = np.multiply(y, z)&amp;#10;    # Add to pop&amp;#10;    embeddings = np.add(embedding, mutation)&amp;#10;    &amp;#10;    return embeddings&amp;#10;    &amp;#10;def num_to_pos(num):&amp;#10;    # Converts image order to screen space coordinates&amp;#10;    # x-axis: [-3/5, -1/5, 1/5, 3/5]&amp;#10;    x_pos = (num * 2 - 3) / 5&amp;#10;    if x_pos &gt;= 1:&amp;#10;        x_pos = x_pos - (8/5)&amp;#10;        y_pos = -1/10&amp;#10;    # y-axis: [3/10, -1/10]&amp;#10;    else:&amp;#10;        y_pos = 3/10&amp;#10;    return x_pos, y_pos&amp;#10;    &amp;#10;" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="global dev_mode&amp;#10;dev_mode = int(expInfo['dev_mode'])&amp;#10;&amp;#10;## Set unCLIP device&amp;#10;if not dev_mode:&amp;#10;    global device&amp;#10;    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')&amp;#10;    print('Using device:', device)&amp;#10;&amp;#10;    ## Load model&amp;#10;    global pipe&amp;#10;    pipe = StableUnCLIPImg2ImgPipeline.from_pretrained(model_path, torch_dtype=torch.float16, variation=&quot;fp16&quot;)&amp;#10;    pipe = pipe.to(device)&amp;#10;    # pipe.enable_model_cpu_offload()&amp;#10;    # pipe.enable_vae_slicing()" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="## Generate batch of images&amp;#10;&amp;#10;## Variables&amp;#10;iteration = trials.thisN&amp;#10;images = []&amp;#10;selected_image = None&amp;#10;&amp;#10;## Start with random embeddings&amp;#10;if iteration == 0:&amp;#10;    embeddings = np.random.randn(8, 1024)&amp;#10;&amp;#10;## Generate images based off embeddings&amp;#10;for i in range(8):&amp;#10;    embedding = embeddings[i,:]&amp;#10;    image_name = f&quot;images/num-{i}.png&quot;&amp;#10;    if not dev_mode:&amp;#10;        generate_image(embedding, image_name)&amp;#10;    &amp;#10;    # Create stimulus&amp;#10;    x_pos, y_pos = num_to_pos(i)&amp;#10;    image = Image(win=win, name=f&quot;image-{i}&quot;, image=image_name, &amp;#10;        anchor=&quot;center&quot;, pos=(x_pos, y_pos), size=(1/3, 1/3))&amp;#10;    image.embedding = embedding&amp;#10;    image.setAutoDraw(True)&amp;#10;    images.append(image)&amp;#10;    &amp;#10;## Create selection square&amp;#10;selection_square = visual.Polygon(win=win, name=&quot;selection&quot;, edges=4,&amp;#10;    anchor=&quot;center&quot;, pos=(0,0), size=(1/2, 1/2), fillColor=&quot;red&quot;,&amp;#10;    ori=45.0, opacity=0.2)&amp;#10;selection_square.setAutoDraw(False)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="## Image selection&amp;#10;for image in images:&amp;#10;    if mouse.isPressedIn(image, buttons=[0]):&amp;#10;        selected_image = image&amp;#10;        # Draw selection square&amp;#10;        selection_square.pos = image.pos&amp;#10;        selection_square.setAutoDraw(True)&amp;#10;        &amp;#10;        &amp;#10;# If rating and image are selected, continue&amp;#10;if selected_image and slider.getRating():&amp;#10;    continueRoutine = False&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="## Print outputs to txt&amp;#10;np.savetxt('top_embeddings.txt', top_embeddings, delimiter=',')&amp;#10;np.savetxt('all_ratings.txt', all_ratings, delimiter=',')" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="## Clear screen&amp;#10;for image in images:&amp;#10;    image.setAutoDraw(False)&amp;#10;&amp;#10;selection_square.setAutoDraw(False)&amp;#10;&amp;#10;## Update output matrices&amp;#10;top_embeddings[iteration,:] = selected_image.embedding&amp;#10;all_ratings[0,iteration] = slider.getRating()&amp;#10;&amp;#10;## Get embeddings for next round&amp;#10;# Update parent_2 (parent 1 from last round)&amp;#10;# (Or random vec if just starting)&amp;#10;if iteration == 0:&amp;#10;    parent_2 = np.random.randn(1, 1024)&amp;#10;else:&amp;#10;    parent_2 = parent_1&amp;#10;    &amp;#10;# Update parent 1 with current selected image   &amp;#10;parent_1 = selected_image.embedding&amp;#10;&amp;#10;## Run children generation&amp;#10;embeddings = generate_children(parent_1, parent_2)&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <SliderComponent name="slider">
        <Param val="Black" valType="color" updates="constant" name="borderColor"/>
        <Param val="LightGray" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="DarkGray" valType="color" updates="constant" name="fillColor"/>
        <Param val="False" valType="bool" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="0" valType="num" updates="constant" name="granularity"/>
        <Param val="" valType="code" updates="None" name="initVal"/>
        <Param val="" valType="list" updates="constant" name="labels"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="slider" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, -0.4)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="constant" name="readOnly"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1.0, 0.1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeHistory"/>
        <Param val="True" valType="bool" updates="constant" name="storeRating"/>
        <Param val="False" valType="bool" updates="constant" name="storeRatingTime"/>
        <Param val="()" valType="list" updates="constant" name="styleTweaks"/>
        <Param val="rating" valType="str" updates="constant" name="styles"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="(1, 2, 3, 4, 5)" valType="list" updates="constant" name="ticks"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </SliderComponent>
      <MouseComponent name="mouse">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouse" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="washout">
      <TextComponent name="text">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="+" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
  </Routines>
  <Flow>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="max_iters" valType="num"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="trial"/>
    <Routine name="washout"/>
    <LoopTerminator name="trials"/>
  </Flow>
</PsychoPy2experiment>
